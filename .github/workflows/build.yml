---

# -------------------------------------------------------------------------------------------------
# Job Name
# -------------------------------------------------------------------------------------------------
name: build


concurrency:
  group: build
  cancel-in-progress: true


# -------------------------------------------------------------------------------------------------
# When to run
# -------------------------------------------------------------------------------------------------
on:
  # Runs on Pull Requests
  pull_request:
  # Runs on Push
  push:
    branches:
      - master
    tags:
      - '*'


# -------------------------------------------------------------------------------------------------
# What to run
# -------------------------------------------------------------------------------------------------
jobs:
  build:
    name: "[ Ansible-${{ matrix.version }} ${{ matrix.platform }} ]"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        version:
          - '2.5'
          - '2.6'
          - '2.7'
          - '2.8'
          - '2.9'
          - '2.10'
          - '2.11'
          - 'latest'
        platform:
          # - amd64
          - arm64v8
    steps:

      # ------------------------------------------------------------
      # Setup repository
      # ------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set variables
        id: vars
        run: |

          # Retrieve git info (tags, etc)
          git fetch --all

          # Branch, Tag or Commit
          GIT_TYPE="$( \
            curl -sS https://raw.githubusercontent.com/cytopia/git-tools/master/git-info.sh \
            | sh \
            | grep '^GIT_TYPE' \
            | sed 's|.*=||g' \
          )"
          # Branch name, Tag name or Commit Hash
          GIT_SLUG="$( \
            curl -sS https://raw.githubusercontent.com/cytopia/git-tools/master/git-info.sh \
            | sh \
            | grep '^GIT_NAME' \
            | sed 's|.*=||g' \
          )"
          # Docker Tag
          if [ "${GIT_TYPE}" = "BRANCH" ] && [ "${GIT_SLUG}" = "master" ]; then
            DOCKER_TAG_BASE="${VERSION}"
            DOCKER_TAG_TOOLS="${VERSION}-tools"
            DOCKER_TAG_INFRA="${VERSION}-infra"
            DOCKER_TAG_AZURE="${VERSION}-azure"
            DOCKER_TAG_AWS="${VERSION}-aws"
            DOCKER_TAG_AWSK8S="${VERSION}-awsk8s"
          else
            DOCKER_TAG_BASE="${VERSION}-${GIT_SLUG}"
            DOCKER_TAG_TOOLS="${VERSION}-tools-${GIT_SLUG}"
            DOCKER_TAG_INFRA="${VERSION}-infra-${GIT_SLUG}"
            DOCKER_TAG_AZURE="${VERSION}-azure-${GIT_SLUG}"
            DOCKER_TAG_AWS="${VERSION}-aws-${GIT_SLUG}"
            DOCKER_TAG_AWSK8S="${VERSION}-awsk8s-${GIT_SLUG}"
          fi

          # Output
          echo "GIT_TYPE=${GIT_TYPE}"
          echo "GIT_SLUG=${GIT_SLUG}"
          echo "DOCKER_TAG_BASE=${DOCKER_TAG_BASE}"
          echo "DOCKER_TAG_TOOLS=${DOCKER_TAG_TOOLS}"
          echo "DOCKER_TAG_INFRA=${DOCKER_TAG_INFRA}"
          echo "DOCKER_TAG_AZURE=${DOCKER_TAG_AZURE}"
          echo "DOCKER_TAG_AWS=${DOCKER_TAG_AWS}"
          echo "DOCKER_TAG_AWSK8S=${DOCKER_TAG_AWSK8S}"

          # Export variable
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#environment-files
          echo "GIT_TYPE=${GIT_TYPE}"                   >> ${GITHUB_ENV}
          echo "GIT_SLUG=${GIT_SLUG}"                   >> ${GITHUB_ENV}
          echo "DOCKER_TAG_BASE=${DOCKER_TAG_BASE}"     >> ${GITHUB_ENV}
          echo "DOCKER_TAG_TOOLS=${DOCKER_TAG_TOOLS}"   >> ${GITHUB_ENV}
          echo "DOCKER_TAG_INFRA=${DOCKER_TAG_INFRA}"   >> ${GITHUB_ENV}
          echo "DOCKER_TAG_AZURE=${DOCKER_TAG_AZURE}"   >> ${GITHUB_ENV}
          echo "DOCKER_TAG_AWS=${DOCKER_TAG_AWS}"       >> ${GITHUB_ENV}
          echo "DOCKER_TAG_AWSK8S=${DOCKER_TAG_AWSK8S}" >> ${GITHUB_ENV}
        env:
          VERSION: ${{ matrix.version }}


      # ------------------------------------------------------------
      # Builder
      # ------------------------------------------------------------
      - name: Build Builder Image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          docker buildx create --use
          scripts/retry make _build_builder
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}


      # ------------------------------------------------------------
      # Base
      # ------------------------------------------------------------
      - name: Build Ansible Base
        run: |
          scripts/retry make build ANSIBLE=${VERSION} FLAVOUR=base
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}

      - name: Test Ansible Base
        run: |
          scripts/retry make test ANSIBLE=${VERSION} FLAVOUR=base
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}


      # ------------------------------------------------------------
      # Tools
      # ------------------------------------------------------------
      - name: Build Ansible Tools
        run: |
          scripts/retry make build ANSIBLE=${VERSION} FLAVOUR=tools
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}

      - name: Test Ansible Tools
        run: |
          scripts/retry make test ANSIBLE=${VERSION} FLAVOUR=tools
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}


      # ------------------------------------------------------------
      # Infra
      # ------------------------------------------------------------
      - name: Build Ansible Infra
        run: |
          scripts/retry make build ANSIBLE=${VERSION} FLAVOUR=infra
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}

      - name: Test Ansible Infra
        run: |
          scripts/retry make test ANSIBLE=${VERSION} FLAVOUR=infra
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}


      # ------------------------------------------------------------
      # Azure
      # ------------------------------------------------------------
      - name: Build Ansible Azure
        run: |
          scripts/retry make build ANSIBLE=${VERSION} FLAVOUR=azure
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}

      - name: Test Ansible Azure
        run: |
          scripts/retry make test ANSIBLE=${VERSION} FLAVOUR=azure
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}


      # ------------------------------------------------------------
      # AWS
      # ------------------------------------------------------------
      - name: Build Ansible AWS
        run: |
          scripts/retry make build ANSIBLE=${VERSION} FLAVOUR=aws
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}

      - name: Test Ansible AWS
        run: |
          scripts/retry make test ANSIBLE=${VERSION} FLAVOUR=aws
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}


      # ------------------------------------------------------------
      # AWS K8s
      # ------------------------------------------------------------
      - name: Build Ansible AWS K8s
        run: |
          scripts/retry make build ANSIBLE=${VERSION} FLAVOUR=awsk8s
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}

      - name: Test Ansible AWS K8s
        run: |
          scripts/retry make test ANSIBLE=${VERSION} FLAVOUR=awsk8s
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}


      # ------------------------------------------------------------
      # Deploy
      # ------------------------------------------------------------
      - name: Publish images (only repo owner)
        run: |

          # Output
          echo "GIT_TYPE=${GIT_TYPE}"
          echo "GIT_SLUG=${GIT_SLUG}"
          echo "DOCKER_TAG_BASE=${DOCKER_TAG_BASE}"
          echo "DOCKER_TAG_TOOLS=${DOCKER_TAG_TOOLS}"
          echo "DOCKER_TAG_INFRA=${DOCKER_TAG_INFRA}"
          echo "DOCKER_TAG_AZURE=${DOCKER_TAG_AZURE}"
          echo "DOCKER_TAG_AWS=${DOCKER_TAG_AWS}"
          echo "DOCKER_TAG_AWSK8S=${DOCKER_TAG_AWSK8S}"

          # Login
          scripts/retry make login USERNAME=${{ secrets.DOCKERHUB_USERNAME }} PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}

          # Create multi-arch manifest
          scripts/retry make manifest ANSIBLE=${VERSION} FLAVOUR=base   TAG=${DOCKER_TAG_BASE}
          scripts/retry make manifest ANSIBLE=${VERSION} FLAVOUR=tools  TAG=${DOCKER_TAG_TOOLS}
          scripts/retry make manifest ANSIBLE=${VERSION} FLAVOUR=infra  TAG=${DOCKER_TAG_INFRA}
          scripts/retry make manifest ANSIBLE=${VERSION} FLAVOUR=azure  TAG=${DOCKER_TAG_AZURE}
          scripts/retry make manifest ANSIBLE=${VERSION} FLAVOUR=aws    TAG=${DOCKER_TAG_AWS}
          scripts/retry make manifest ANSIBLE=${VERSION} FLAVOUR=awsk8s TAG=${DOCKER_TAG_AWSK8S}
        env:
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}
        # https://help.github.com/en/github/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#functions
        if: github.event.pull_request.base.repo.id == github.event.pull_request.head.repo.id
            && (
              (github.event_name == 'schedule' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')))
              ||
              (github.event_name == 'push'     && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')))
              ||
              (github.event_name == 'push'     && startsWith(github.ref, 'refs/heads/release-'))
            )
